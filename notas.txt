35/43: GIT REBASE: REORGANIZANDO EL TRABAJO REALIZADO

REBASE Reescribe la historia del repositorio, cambia la historia de donde comenzó la rama y sólo debe 
ser usado de manera local.
El rebase se lo hace desde la rama afectada, no desde la rama main. 
---> otrarama
$ git rebase main #Primero se hace rebase hacia la rama principal y luego hacia 
		  #la rama secundaria desde main
---> main
$ git rebase otrarama
--En Conlusión un git rebase es una forma de hacer cambios silenciosos en otras 
ramas y volver a pegar una historia de esa rama a una rama anterior haciendole 
un rebase.--

36/43 GIT STASH: GUARDAR CAMBIOS EN MEMORIA Y RECUPERARLOS DESPUÉS

STASHED Nos sirve para guardar cambios para después, es una lista de estados que 
nos guarda algunos cambios de rama sin perder el trabajo que todavía no guardamos 
en un commit. 
--->main
$ git stash 			#Vuelve al estado anterior, esto funciona siempre
				#y cuando no se haga un commit, esto también guarda
				#el cambio realizado, como un punto de restauración
				#hacia el estado editado. 
$ git stash pop 		#Vuelve al estado editado.
$ git stash list 		#Muestra los stash temporales guardados.
$ git stash branch otrarama 	#Si quiero poner esos cambios realizados en otra
				#rama se ingresa este comando, automaticamente se 
				#crea esa rama
$ git stash drop 		#Para borrar el git stash 

37/43 GIT CLEAN: LIMPIAR TU PROYECTO DE ARCHIVOS NO DESEADOS 

$ git clean --dry-run  #Muestra los archivos que se van a borrar 
$ git clean -f         #Borra los archivos no deseados 
$ git clean -df	       #Borra las carpetas

38/43 GIT CHERRY-PICK TRAER COMMITS VIEJOS AL HEAD DE UN BRANCH

---> main
$ git cherry-pick hashdelcommit #Se inserta el hash del commit que quiero traer, 
				#Esto se lo hace en la rama main

39/43 GIT RESET Y REFLOG:ÚSESE EN CASO DE EMERGENCIA 

Git guarda todos los cambios aunque decidads borarlos, al borrar un cambio lo
que estás haciendo sólo es actualizar la punta del branch, para gestionar estas 
puntas existe un mecanismo llamado registros de referencia o reflogs. 
---> main
$git reflog 		#Se busca el hash correcto donde no hayan cambios no
			#deseados
$git reset --HARD hash 	#Regresa al punto de restauración y desaperecen todos los
			#cambios realizados, incluso los commits. 

40/43 RECONSTRUIR COMMITS EN GIT CON AMEND

$ git commit --amend 	#Los cambios que se hicieron los pega al commit anterior
			#No crea un commit nuevoRegresa al punto de restauración y desaperecen todos los
						#cambios realizados, incluso los commits. 

40/43 RECONSTRUIR COMMITS EN GIT CON AMEND

$ git commit --amend 	#Los cambios que se hicieron los pega al commit anterior
			#No crea un commit nuevo

41/43 BUSCAR EN ARCHIVOS Y COMMITS DE GIT CON GREP Y LOG 

$ git grep color	#Busca donde se usó color 
$ git grep la 		#Donde se usó la palabra "la"
$ git grep -n color 	#En qué lineas se usó la plabra color 
$ git grep -c la 	#Cuantas veces se usó la plabra "la"
$ git grep -c platzi 	#Cuantas veces se usa la plabra Platzi 
$ git grep -c "<p>"	#Cuantas veces se utilizó la etiqueta <p>
$ git log -S "cabecera"	#Cuantas veces se usó la plabra cabecera en todos los 
			#commits. 
---> grep: para los archivos. 
---> log: para los commits

42/43 COMANDOS Y RECURSOS COLABORATIVOS EN GIT Y GITHUB

$ git shortlog -sn			#Muestra cuantos commit han hecho cada 
					#miembro del equipo 
$ git shortlog -sn --all		#Muestra cuantos commit han hecho cada 
					#miembro del equipo hasta los que han 
					#sido eliminados
$ git shortlog -sn --all --no-merge	#Muestra cuantos commit han hecho cada
					#miembro quitando los eliminados sin los 
					#merges
$ git blame ARCHIVO -Llinea_inicial,linea_final # Muestra quien hizo cada cosa por
					#linea indicandole desde que línea ver por
					#ejemplo -L35,50.
$ git branch -r 			#Se muestran todas las ramas remotas 
$ git branch -a 			#Se muestran todas las ramas tanto locales
					#como remotas
